//
//  HomeViewController.swift
//  SleepTimer
//
//  Created by Petrov Anton on 15.06.2020.
//  Copyright Â© 2020 APM. All rights reserved.
//
//  This file was generated by the MVVM Core Xcode template
//

import UIKit

final class HomeViewController: UIViewController {
  
  var viewModel: HomeViewModelProtocol!
  
  // MARK: - Outlets
  
  @IBOutlet var appStateLabel: UILabel!
  @IBOutlet var homeButton: UIButton!
  @IBOutlet var optionsTableView: UITableView!
  
  override func viewDidLoad() {
    super.viewDidLoad()
    setupUI()
    bind(viewModel)
  }
}

// MARK: - Actions

private typealias Actions = HomeViewController
private extension Actions {
  @objc func didSelectHomeButton() {
    viewModel.didSelectHomeButton()
  }
}

// MARK: - DataBinding

private typealias DataBinding = HomeViewController
private extension DataBinding {
  func bind(_ viewModel: HomeViewModelProtocol) {
    viewModel.appStateTitle.observeWithStartingValue(on: self) { [weak self] value in
      self?.appStateLabel.text = value
    }
    
    viewModel.homeButtonTitle.observeWithStartingValue(on: self) { [weak self] value in
      self?.homeButton.setTitle(value, for: .normal)
    }
    
    viewModel.reloadRows.observeWithStartingValue(on: self) { [weak self] in
      self?.optionsTableView.reloadData()
    }
    
    viewModel.isEnableOptions.observe(on: self) { [weak self] (isEnable) in
      self?.optionsTableView.isUserInteractionEnabled = isEnable
      self?.optionsTableView.alpha = isEnable ? 1 : 0.5
    }
  }
}

// MARK: - Fileprivate

fileprivate typealias UISetups = HomeViewController
fileprivate extension UISetups {
  func setupUI() {
    homeButton.addTarget(self, action: #selector(didSelectHomeButton), for: .touchUpInside)
    setupTableView()
  }
  
  func setupTableView() {
    optionsTableView.dataSource = self
    optionsTableView.delegate = self
    optionsTableView.rowHeight = UITableView.automaticDimension
    optionsTableView.estimatedRowHeight = UITableView.automaticDimension
    optionsTableView.registerCellNib(HomeTableViewCell.self)
  }
  
  func cellViewModel(by indexPath: IndexPath) -> HomeRows {
    return viewModel.rows[indexPath.row]
  }
}

// MARK: - UITableViewDataSource

extension HomeViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return viewModel.rows.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(cellClass: HomeTableViewCell.self, forIndexPath: indexPath)
    let cellViewModel = self.cellViewModel(by: indexPath)
    cell.setViewModel(cellViewModel)
    return cell
  }
  
}

extension HomeViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
    let cellViewModel = self.cellViewModel(by: indexPath)
    cellViewModel.didSelect()
  }
}

private extension UITableView {
  
  func registerCellNib<T: UITableViewCell>(_ cellClass: T.Type) {
    let nib = UINib(nibName: String(describing: cellClass.self), bundle: nil)
    register(nib, forCellReuseIdentifier: String(describing: cellClass.self))
  }
  
  func registerCell<T: UITableViewCell>(_ cellClass: T.Type) {
    register(cellClass, forCellReuseIdentifier: String(describing: cellClass.self))
  }
  
  
  func dequeueReusableCell<T: UITableViewCell>(cellClass: T.Type, forIndexPath indexPath: IndexPath) -> T {
    return dequeueReusableCell(withIdentifier: String(describing: cellClass.self),
                               for: indexPath) as! T
  }
  
}
