//
//  HomeViewModel.swift
//  SleepTimer
//
//  Created by Petrov Anton on 15.06.2020.
//  Copyright Â© 2020 APM. All rights reserved.
//
//  This file was generated by the MVVM Core Xcode template
//

import Foundation

protocol HomeViewModelInput {
  func openSoundTimerOptions()
  func openRecordingDurationOptions()
  func didSelectHomeButton()
}

protocol HomeViewModelOutput {
  var appStateTitle: Observable<String> { get }
  var homeButtonTitle: Observable<String> { get }
  var reloadRows: ObservableEmpty { get }
  var rows: [HomeRows] { get }
}

protocol HomeViewModelProtocol: HomeViewModelInput, HomeViewModelOutput  { }

final class HomeViewModel: HomeViewModelProtocol {
  
  private let router: HomeRouterProtocol
  private let playerUseCase: PlayerUseCaseProtocol
  private let recorderUseCase: RecorderUseCaseProtocol
  
  init(router: HomeRouterProtocol,
       playerUseCase: PlayerUseCaseProtocol,
       recorderUseCase: RecorderUseCaseProtocol) {
    self.router = router
    self.playerUseCase = playerUseCase
    self.recorderUseCase = recorderUseCase
  }
  
  private var appState = HomeAppState.idle {
    didSet {
      appStateTitle.value = appState.prettyValue
    }
  }
  
  private var homeButtonState = HomeButtomState.play {
    didSet {
      homeButtonTitle.value = homeButtonState.prettyValue
    }
  }
  
  // MARK: MoviesListViewModelOutput
  
  var reloadRows = ObservableEmpty()
  
  var rows: [HomeRows] = {
    let defaultSoundTimer = SoundTimerOption.default
    let defaultRecordingDuration = RecordingDurationOption.default
    return [HomeRows.soundTimer(value: defaultSoundTimer.prettyValue),
            HomeRows.recordingDuration(value: defaultRecordingDuration.prettyValue)]
  }()
  
  var appStateTitle: Observable<String> = {
    return Observable(HomeAppState.idle.prettyValue)
  }()
  
  var homeButtonTitle: Observable<String> = {
    Observable(HomeButtomState.play.prettyValue)
  }()
  
  // MARK: MoviesListViewModelInput
  
  func openSoundTimerOptions() {
    
  }
  
  func openRecordingDurationOptions() {
    
  }
  
  func didSelectHomeButton() {
    checkAppState()
  }
}

// MARK: - Private

private typealias Private = HomeViewModel
private extension Private {
  
  func checkAppState() {
    switch appState {
    case .idle:
      appState = .playing
      homeButtonState = .pause
      
    case .paused:
      appState = .playing
      homeButtonState = .pause
      
    case .playing:
      appState = .paused
      homeButtonState = .play
      
    case .recording:
      appState = .idle
      homeButtonState = .play
    }
  }
  
}

