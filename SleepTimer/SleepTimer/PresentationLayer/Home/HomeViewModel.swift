//
//  HomeViewModel.swift
//  SleepTimer
//
//  Created by Petrov Anton on 15.06.2020.
//  Copyright Â© 2020 APM. All rights reserved.
//
//  This file was generated by the MVVM Core Xcode template
//

import Foundation

protocol HomeViewModelInput {
  func didSelectHomeButton()
}

protocol HomeViewModelOutput {
  var isEnableOptions: Observable<Bool> { get }
  var appStateTitle: Observable<String> { get }
  var homeButtonTitle: Observable<String> { get }
  var reloadRows: ObservableEmpty { get }
  var rows: [HomeRows] { get }
}

protocol HomeViewModelProtocol: HomeViewModelInput, HomeViewModelOutput  { }

final class HomeViewModel: HomeViewModelProtocol {
  
  fileprivate let router: HomeRouterProtocol
  private var sleepTracker: SleepTrackerUseCaseProtocol
  
  init(router: HomeRouterProtocol,
       playerRepository: PlayerRepositoryProtocol,
       recorderRepository: RecorderRepositoryProtocol) {
    self.router = router
    self.sleepTracker = SleepTrackerUseCase(soundTimer: soundTimerOption,
                                            recordingDuration: recordingDurationOption,
                                            playerRepository: playerRepository,
                                            recorderRepository: recorderRepository)
    self.sleepTracker.delegate = self
    soundTimerOption.observe(on: self, observerBlock: { _ in self.reloadRows.notify() })
    recordingDurationOption.observe(on: self, observerBlock: { _ in self.reloadRows.notify() })
  }
  
  private var homeAppState = HomeAppState.idle {
    didSet {
      setupUIStatus(by: homeAppState)
    }
  }
  
  private var homeButtonState = HomeButtomState.play
  
  fileprivate let soundTimerOption = Observable(SoundTimerOption.default)
  fileprivate var recordingDurationOption = Observable(RecordingDurationOption.default)
  
  // MARK: MoviesListViewModelOutput
  
  var reloadRows = ObservableEmpty()
  
  var isEnableOptions = Observable(true)
  
  var rows: [HomeRows] {
    let soundTimerRow = HomeRows.soundTimer(value: soundTimerOption.value.prettyValue,
                                            didSelect: self.openSoundTimerOptions)
    let recordingDurationRow = HomeRows.recordingDuration(value: recordingDurationOption.value.prettyValue,
                                                          didSelect: self.openRecordingDurationOptions)
    return [soundTimerRow, recordingDurationRow]
  }
  
  var appStateTitle = Observable(HomeAppState.idle.prettyValue)
  var homeButtonTitle = Observable(HomeButtomState.play.prettyValue)
  
  // MARK: MoviesListViewModelInput
  
  func didSelectHomeButton() {
    switch (homeAppState, homeButtonState) {
    case (.idle, .play), (.paused, .play), (.recording, .play):
      sleepTracker.play()
    case (.playing, .pause), (.recording, .pause):
      sleepTracker.pause()
    default: ()
    }
  }
}

// MARK: - Private

private typealias Private = HomeViewModel
private extension Private {
  
  func interpretToAppStatus(_ status: SleepTrackerState) -> HomeAppState {
    switch status {
    case .idle:             return .idle
    case .playingSound:     return .playing
    case .recordingSound:   return .recording
    case .pausedRecording:  return .paused
    case .pausedPlaying:    return .paused
    }
  }
  
  func openSoundTimerOptions() {
    router.present(message: "Sound Timer", value: soundTimerOption, ranges: SoundTimerOption.defaultRange)
  }
  
  func openRecordingDurationOptions() {
    router.present(message: "Recording Duration", value: recordingDurationOption, ranges: RecordingDurationOption.defaultRange)
  }
  
  func setupUIStatus(by status: HomeAppState) {
    appStateTitle.value = status.prettyValue
    switch status {
    case .idle:
      self.homeButtonState = .play
      self.isEnableOptions.value = true
    case .paused:
      homeButtonState = .play
      isEnableOptions.value = false
    case .playing:
      homeButtonState = .pause
      isEnableOptions.value = false
    case .recording:
      homeButtonState = .pause
      isEnableOptions.value = false
    }
    homeButtonTitle.value = homeButtonState.prettyValue
  }
  
}

// MARK: - SleepTrackerUseCaseDelegate

extension HomeViewModel: SleepTrackerUseCaseDelegate {
  func didChangeStatus(_ status: SleepTrackerState) {
    homeAppState = interpretToAppStatus(status)
  }
}
