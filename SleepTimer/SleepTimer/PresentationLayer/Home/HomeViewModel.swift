//
//  HomeViewModel.swift
//  SleepTimer
//
//  Created by Petrov Anton on 15.06.2020.
//  Copyright Â© 2020 APM. All rights reserved.
//
//  This file was generated by the MVVM Core Xcode template
//

import Foundation

protocol HomeViewModelInput {
  func didSelectHomeButton()
}

protocol HomeViewModelOutput {
  var isEnableOptions: Observable<Bool> { get }
  var appStateTitle: Observable<String> { get }
  var homeButtonTitle: Observable<String> { get }
  var reloadRows: ObservableEmpty { get }
  var rows: [HomeRows] { get }
}

protocol HomeViewModelProtocol: HomeViewModelInput, HomeViewModelOutput  { }

final class HomeViewModel: HomeViewModelProtocol {
  
  fileprivate let router: HomeRouterProtocol
  private let playerUseCase: PlayerUseCaseProtocol
  private let recorderUseCase: RecorderUseCaseProtocol
  
  init(router: HomeRouterProtocol,
       playerUseCase: PlayerUseCaseProtocol,
       recorderUseCase: RecorderUseCaseProtocol) {
    self.router = router
    self.playerUseCase = playerUseCase
    self.recorderUseCase = recorderUseCase
    soundTimerOption.observe(on: self, observerBlock: { _ in self.reloadRows.notify() })
    recordingDurationOption.observe(on: self, observerBlock: { _ in self.reloadRows.notify() })
  }
  
  private var appState = HomeAppState.idle {
    didSet {
      appStateTitle.value = appState.prettyValue
    }
  }
  
  private var homeButtonState = HomeButtomState.play {
    didSet {
      homeButtonTitle.value = homeButtonState.prettyValue
    }
  }
  
  fileprivate let soundTimerOption = Observable(SoundTimerOption.default)
  fileprivate var recordingDurationOption = Observable(RecordingDurationOption.default)
  
  // MARK: MoviesListViewModelOutput
  
  var reloadRows = ObservableEmpty()
  
  var isEnableOptions = Observable(true)
  
  var rows: [HomeRows] {
    let soundTimerRow = HomeRows.soundTimer(value: soundTimerOption.value.prettyValue,
                                            didSelect: self.openSoundTimerOptions)
    let recordingDurationRow = HomeRows.recordingDuration(value: recordingDurationOption.value.prettyValue,
                                                          didSelect: self.openRecordingDurationOptions)
    return [soundTimerRow, recordingDurationRow]
  }
  
  lazy var appStateTitle: Observable<String> = {
    return Observable(HomeAppState.idle.prettyValue)
  }()
  
  lazy var homeButtonTitle: Observable<String> = {
    Observable(HomeButtomState.play.prettyValue)
  }()
  
  // MARK: MoviesListViewModelInput
  
  func didSelectHomeButton() {
    checkAppState()
  }
}

// MARK: - Private

private typealias Private = HomeViewModel
private extension Private {
  
  func openSoundTimerOptions() {
    router.present(message: "Sound Timer", value: soundTimerOption, ranges: SoundTimerOption.defaultRange)
  }
  
  func openRecordingDurationOptions() {
    router.present(message: "Recording Duration", value: recordingDurationOption, ranges: RecordingDurationOption.defaultRange)
  }
  
  func checkAppState() {
    switch appState {
    case .idle:
      appState = .playing
      homeButtonState = .pause
      isEnableOptions.value = false
//      playerUseCase.playSound(soundTimer: soundTimerOption.value) { result in
//        switch result {
//        case .success:
//          self.appState = .recording
//          self.checkAppState()
//        case .failure(let error):
//          self.router.showError(message: error.localizedDescription)
//        }
//      }
    case .paused:
      appState = .playing
      homeButtonState = .pause
      isEnableOptions.value = false
      
    case .playing:
      appState = .paused
      homeButtonState = .play
      isEnableOptions.value = true
      
    case .recording:
      appState = .idle
      homeButtonState = .play
      isEnableOptions.value = true
//      recorderUseCase.startRecord(durationOption: recordingDurationOption.value) { result in
//        switch result {
//        case .success:
//          self.appState = .idle
//          self.checkAppState()
//        case .failure(let error):
//          self.router.showError(message: error.localizedDescription)
//        }
//      }
    }
  }
  
}

